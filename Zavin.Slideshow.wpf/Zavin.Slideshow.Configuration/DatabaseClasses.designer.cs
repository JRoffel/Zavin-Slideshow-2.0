using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Zavin.Slideshow.Configuration.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zavin.Slideshow.Configuration
{
    [Database(Name="mczavidord")]
	public partial class DatabaseClassesDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertconfig(config instance);
    partial void Updateconfig(config instance);
    partial void Deleteconfig(config instance);
    #endregion
		
		public DatabaseClassesDataContext() : 
				base(Settings.Default.mczavidordConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<config> configs
		{
			get
			{
				return this.GetTable<config>();
			}
		}
	}
	
	[Table(Name="mcmain.config")]
	public partial class config : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private Nullable<int> _YearTargetTon;
		
		private Nullable<int> _SlideTimerSeconds;
		
		private Nullable<int> _MemoRunCounter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYearTargetTonChanging(Nullable<int> value);
    partial void OnYearTargetTonChanged();
    partial void OnSlideTimerSecondsChanging(Nullable<int> value);
    partial void OnSlideTimerSecondsChanged();
    partial void OnMemoRunCounterChanging(Nullable<int> value);
    partial void OnMemoRunCounterChanged();
    #endregion
		
		public config()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_YearTargetTon", DbType="Int")]
		public Nullable<int> YearTargetTon
		{
			get
			{
				return this._YearTargetTon;
			}
			set
			{
				if ((this._YearTargetTon != value))
				{
					this.OnYearTargetTonChanging(value);
					this.SendPropertyChanging();
					this._YearTargetTon = value;
					this.SendPropertyChanged("YearTargetTon");
					this.OnYearTargetTonChanged();
				}
			}
		}
		
		[Column(Storage="_SlideTimerSeconds", DbType="Int")]
		public Nullable<int> SlideTimerSeconds
		{
			get
			{
				return this._SlideTimerSeconds;
			}
			set
			{
				if ((this._SlideTimerSeconds != value))
				{
					this.OnSlideTimerSecondsChanging(value);
					this.SendPropertyChanging();
					this._SlideTimerSeconds = value;
					this.SendPropertyChanged("SlideTimerSeconds");
					this.OnSlideTimerSecondsChanged();
				}
			}
		}
		
		[Column(Storage="_MemoRunCounter", DbType="Int")]
		public Nullable<int> MemoRunCounter
		{
			get
			{
				return this._MemoRunCounter;
			}
			set
			{
				if ((this._MemoRunCounter != value))
				{
					this.OnMemoRunCounterChanging(value);
					this.SendPropertyChanging();
					this._MemoRunCounter = value;
					this.SendPropertyChanged("MemoRunCounter");
					this.OnMemoRunCounterChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
